{"version":3,"sources":["logo.svg","reducers/piecesReducer.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SAMPLE_PIECES","0","type","player","location","1","2","piecesInitialState","Object","assign","PIECE_ACTIONS","piecesReducer","state","action","id","Error","Piece","props","clickHandler","pieceData","selected","className","onClick","src","logo","alt","Board","useState","setSelected","useReducer","piecesState","piecesDispatch","Array","keys","map","row","col","key","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,8OCA9BC,EAAgB,CAC3BC,EAAG,CACDC,KAAM,OACNC,OAAQ,EACRC,SAAU,CAAC,EAAE,IAEfC,EAAG,CACDH,KAAM,SACNC,OAAQ,EACRC,SAAU,CAAC,EAAG,IAEhBE,EAAG,CACDJ,KAAM,OACNC,OAAQ,EACRC,SAAU,CAAC,EAAE,KAaJG,EAAqB,WAChC,OAAOC,OAAOC,OAAO,GAAIT,IAGdU,EACL,OAKKC,EAAgB,SAACC,EAAOC,GAInC,OAAQA,EAAOX,MACb,KAAKQ,EACH,OAAO,eACFE,EADL,eAEGC,EAAOC,GAFV,eAGOF,EAAMC,EAAOC,IAHpB,CAIIV,SAAUS,EAAOT,aAGvB,QACE,MAAM,IAAIW,QC9CVC,EAAQ,SAACC,GAAW,IACjBC,EAAqCD,EAArCC,aAAcC,EAAuBF,EAAvBE,UAAWC,EAAYH,EAAZG,SAChC,OACE,yBAAKC,UAAS,kCACMF,EAAUf,SAAS,GADzB,gBACmCe,EAAUf,SAAS,GADtD,iBAEZgB,GAAY,0BAFA,UAITE,QAAS,kBAAMJ,MAElB,yBAAKK,IAAKC,IAAMH,UAAU,cAAcI,IAAI,SAC5C,0BAAMJ,UAAS,sBAAsC,IAArBF,EAAUhB,OAAe,aAAc,KAAOgB,EAAUjB,QAwD/EwB,EAnDD,WAAO,IAAD,EACcC,mBAAS,MADvB,mBACXP,EADW,KACDQ,EADC,OAEoBC,qBAAWlB,EAAeJ,IAAsBA,GAFpE,mBAEXuB,EAFW,KAEEC,EAFF,KAwBlB,OACE,yBAAKV,UAAU,iBACb,yBAAKA,UAAU,mBAEZ,YAAIW,MAAM,GAAGC,QAAQC,KAAI,SAACC,GACvB,OAAO,YAAIH,MAAM,IAAIC,QAAQC,KAAI,SAACE,GAChC,OAAO,yBACLC,IAAG,uBAAkBF,EAAI,EAAtB,YAA2BC,EAAI,GAClCf,UAAS,2BAAsBc,EAAI,EAA1B,gBAAmCC,EAAI,GAChDd,QAAS,kBA5BAlB,EA4BoB,CAAC+B,EAAI,EAAGC,EAAI,QA3BpC,OAAbhB,IAIFW,EAAe,CACb7B,KAAMQ,EACNI,GAAIM,EACJhB,aAIFwB,EAAY,QAZM,IAACxB,YAmClB,CAAC,EAAE,EAAE,GAAG8B,KAAI,SAACpB,GAAD,OACX,kBAAC,EAAD,CACEI,aAAc,kBAAMU,EAAYd,IAChCK,UAAWW,EAAYhB,GACvBM,SAAUA,IAAaN,SC7ClBwB,MAbf,WACE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKE,IAAKC,IAAMH,UAAU,WAAWI,IAAI,UAE3C,0BAAMJ,UAAU,YACd,kBAAC,EAAD,SCDYkB,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d0e529b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const SAMPLE_PIECES = {\n  0: {\n    type: 'pawn',\n    player: 1,\n    location: [1,1]\n  },\n  1: {\n    type: 'knight',\n    player: 2,\n    location: [2, 3]\n  },\n  2: {\n    type: 'king',\n    player: 1,\n    location: [1,4]\n  },\n}\n\n// const emptyBoard = (row, col) => {\n//   const newObject = {};\n//   for (let i = 0; i <= (row*col); i++) {\n//     // make all spaces null\n//     newObject[i] = null;\n//   }\n//   return newObject;\n// }\n\nexport const piecesInitialState = () => {\n  return Object.assign({}, SAMPLE_PIECES)\n};\n\nexport const PIECE_ACTIONS = {\n  MOVE: 'move',\n  DISCARD: 'discard',\n  RESET: 'reset'\n};\n\nexport const piecesReducer = (state, action) => {\n  // console.log(state, action);\n  // EDIT example action:\n  // {type: 'move', id: 1, location: 4 }\n  switch (action.type) {\n    case PIECE_ACTIONS.MOVE:\n      return {\n        ...state,\n        [action.id]: {\n          ...state[action.id],\n          location: action.location\n        }\n      }\n    default:\n      throw new Error();\n  }\n};\n","import React, {useReducer, useState} from 'react';\nimport './Board.scss'\nimport logo from \"./logo.svg\";\nimport {PIECE_ACTIONS, piecesInitialState, piecesReducer} from './reducers/piecesReducer';\n\nconst Piece = (props) => {\n  const {clickHandler, pieceData, selected} = props;\n  return (\n    <div className={`\n    square-member row-${pieceData.location[0]} col-${pieceData.location[1]}\n    ${selected && 'square-member--selected'}\n    `}\n         onClick={() => clickHandler()}\n    >\n      <img src={logo} className='board-piece' alt=\"logo\" />\n      <span className={`board-piece ${pieceData.player === 2 ? 'player-two': ''}`}>{pieceData.type}</span>\n    </div>\n  )\n}\n\nconst Board = () => {\n  const [selected, setSelected] = useState(null);\n  const [piecesState, piecesDispatch] = useReducer(piecesReducer, piecesInitialState(), piecesInitialState)\n\n\n  const onSquareClick = (location) => {\n    if (selected !== null) {\n      //clear clicked square\n\n      //move selected pc here\n      piecesDispatch({\n        type: PIECE_ACTIONS.MOVE,\n        id: selected,\n        location\n      })\n\n      //deselect\n      setSelected(null);\n    } else {\n      //check for piece\n      //select piece\n    }\n  }\n\n  return (\n    <div className=\"board-wrapper\">\n      <div className=\"board-container\">\n\n        {[...Array(8).keys()].map((row) => {\n            return [...Array(10).keys()].map((col) => {\n              return <div\n                key={`board-squareR${row+1}C${col+1}`}\n                className={`board-square row-${row+1} col-${col+1}`}\n                onClick={() => onSquareClick([row+1, col+1])}\n              />\n            })\n          }\n        )}\n\n      </div>\n      {[0,1,2].map((id)=>\n        <Piece\n          clickHandler={() => setSelected(id)}\n          pieceData={piecesState[id]}\n          selected={selected === id}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Board;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\n\nimport Board from './Board.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <main className=\"App-main\">\n        <Board/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}